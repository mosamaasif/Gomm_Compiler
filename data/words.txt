(FUNC, ^)
(DT, Integer)
(:, ^)
(ID, numPrint)
(BRKT, ()
(DT, Integer)
(:, ^)
(ID, num)
(PUNC, ,)
(DT, Integer)
(:, ^)
(ID, length)
(BRKT, ))
(BRKT, {)
(DT, Integer)
(:, ^)
(ID, i)
(PUNC, ,)
(ID, j)
(PUNC, ,)
(ID, first)
(PUNC, ,)
(ID, temp)
(PUNC, ;)
(DT, char)
(:, ^)
(ID, a)
(PUNC, ;)
(ID, a)
(:=, ^)
(LC, 'x')
(PUNC, ;)
(IOS, print)
(BRKT, ()
(STR, "enter number")
(BRKT, ))
(PUNC, ;)
(IOS, In)
(>>, ^)
(ID, i)
(PUNC, ;)
(IOS, println)
(BRKT, ()
(ID, i)
(BRKT, ))
(PUNC, ;)
(ID, i)
(:=, ^)
(ID, length)
(PUNC, ;)
(WHILE, ^)
(ID, i)
(RO, >)
(NUMC, 0)
(:, ^)
(BRKT, {)
(ID, first)
(:=, ^)
(NUMC, 0)
(PUNC, ;)
(ID, j)
(:=, ^)
(NUMC, 1)
(PUNC, ;)
(WHILE, ^)
(ID, j)
(RO, <)
(ID, i)
(:, ^)
(BRKT, {)
(ID, write)
(BRKT, ()
(ID, j)
(BRKT, ))
(PUNC, ;)
(ID, j)
(:=, ^)
(ID, j)
(AO, +)
(NUMC, 1)
(AO, *)
(NUMC, 3)
(AO, /)
(NUMC, 4)
(PUNC, ;)
(BRKT, })
(CS, if)
(ID, j)
(RO, =)
(NUMC, 1)
(:, ^)
(BRKT, {)
(IOS, print)
(BRKT, ()
(STR, "one")
(BRKT, ))
(PUNC, ;)
(BRKT, })
(CS, elif)
(ID, j)
(RO, =)
(NUMC, 2)
(:, ^)
(BRKT, {)
(IOS, print)
(BRKT, ()
(STR, "two")
(BRKT, ))
(PUNC, ;)
(CS, if)
(ID, j)
(RO, =)
(NUMC, 2)
(:, ^)
(BRKT, {)
(IOS, print)
(BRKT, ()
(STR, "two1")
(BRKT, ))
(PUNC, ;)
(BRKT, })
(CS, elif)
(ID, j)
(RO, =)
(NUMC, 3)
(:, ^)
(BRKT, {)
(IOS, print)
(BRKT, ()
(STR, "How even?!")
(BRKT, ))
(PUNC, ;)
(BRKT, })
(CS, else)
(BRKT, {)
(IOS, print)
(BRKT, ()
(STR, "no two1")
(BRKT, ))
(PUNC, ;)
(BRKT, })
(BRKT, })
(CS, elif)
(ID, j)
(RO, =)
(NUMC, 3)
(:, ^)
(BRKT, {)
(IOS, print)
(BRKT, ()
(STR, "three")
(BRKT, ))
(PUNC, ;)
(BRKT, })
(CS, else)
(BRKT, {)
(IOS, print)
(BRKT, ()
(STR, "others")
(BRKT, ))
(PUNC, ;)
(BRKT, })
(ID, i)
(:=, ^)
(ID, i)
(AO, -)
(NUMC, 1)
(PUNC, ;)
(BRKT, })
(IOS, print)
(BRKT, ()
(STR, "temp is")
(BRKT, ))
(PUNC, ;)
(IOS, println)
(BRKT, ()
(ID, temp)
(BRKT, ))
(PUNC, ;)
(RET, ^)
(ID, i)
(PUNC, ;)
(BRKT, })
